name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.12, 3.13]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,test]

    - name: Set up test environment
      run: |
        echo "TESTING=1" >> $GITHUB_ENV
        echo "GOOGLE_API_KEY=test_key" >> $GITHUB_ENV
        echo "OPENAI_API_KEY=test_key" >> $GITHUB_ENV
        echo "OPENROUTER_API_KEY=test_key" >> $GITHUB_ENV

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 api --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 api --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Type check with mypy
      run: |
        mypy api --ignore-missing-imports
      continue-on-error: true

    - name: Format check with black
      run: |
        black --check api tests
      continue-on-error: true

    - name: Import sort check with isort
      run: |
        isort --check-only api tests
      continue-on-error: true

    - name: Run unit tests
      run: |
        pytest tests/unit -v --cov=api --cov-report=xml --cov-report=term-missing

    - name: Run integration tests
      run: |
        pytest tests/integration -v

    - name: Run performance tests
      run: |
        pytest tests/performance -v -m "not slow"
      continue-on-error: true

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
      continue-on-error: true

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.12

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run Bandit security scan
      run: |
        bandit -r api -f json -o bandit-report.json
      continue-on-error: true

    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json
      continue-on-error: true

    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
      if: always()

  e2e-tests:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.12

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,test]

    - name: Set up test environment
      run: |
        echo "TESTING=1" >> $GITHUB_ENV
        echo "GOOGLE_API_KEY=test_key" >> $GITHUB_ENV
        echo "OPENAI_API_KEY=test_key" >> $GITHUB_ENV

    - name: Run end-to-end tests
      run: |
        pytest tests/e2e -v --timeout=300
      timeout-minutes: 10

  docker-build:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
      if: github.event_name == 'push'

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: grantha/api
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: ${{ github.event_name == 'push' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: [docker-build, e2e-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deployment step would go here"
        echo "This could trigger deployment to cloud provider, k8s cluster, etc."
      # Add actual deployment steps here

  notify:
    runs-on: ubuntu-latest
    needs: [test, security-scan, e2e-tests]
    if: always()

    steps:
    - name: Notify on success
      if: ${{ needs.test.result == 'success' && needs.security-scan.result == 'success' && needs.e2e-tests.result == 'success' }}
      run: |
        echo "All tests passed! üéâ"

    - name: Notify on failure
      if: ${{ needs.test.result == 'failure' || needs.security-scan.result == 'failure' || needs.e2e-tests.result == 'failure' }}
      run: |
        echo "Tests failed! ‚ùå"
        echo "Check the logs for details."