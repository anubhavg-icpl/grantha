"""Initial database schema with user authentication

Revision ID: f21017f067e1
Revises: 
Create Date: 2025-08-26 14:26:08.270200

"""
from typing import Sequence, Union
import os
import sys

from alembic import op
import sqlalchemy as sa

# Add the src directory to Python path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), "..", "..", "src"))
from grantha.database.base import GUID


# revision identifiers, used by Alembic.
revision: str = 'f21017f067e1'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('username', sa.String(length=50), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=True),
    sa.Column('password_hash', sa.String(length=255), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_verified', sa.Boolean(), nullable=False),
    sa.Column('is_superuser', sa.Boolean(), nullable=False),
    sa.Column('full_name', sa.String(length=255), nullable=True),
    sa.Column('bio', sa.Text(), nullable=True),
    sa.Column('last_login', sa.DateTime(timezone=True), nullable=True),
    sa.Column('failed_login_attempts', sa.String(length=10), nullable=False),
    sa.Column('locked_until', sa.DateTime(timezone=True), nullable=True),
    sa.Column('verification_token', sa.String(length=255), nullable=True),
    sa.Column('verification_sent_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('verified_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('reset_token', sa.String(length=255), nullable=True),
    sa.Column('reset_token_expires', sa.DateTime(timezone=True), nullable=True),
    sa.Column('id', GUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_user_email_active', 'users', ['email', 'is_active'], unique=False)
    op.create_index('idx_user_reset_token', 'users', ['reset_token'], unique=False)
    op.create_index('idx_user_username_active', 'users', ['username', 'is_active'], unique=False)
    op.create_index('idx_user_verification_token', 'users', ['verification_token'], unique=False)
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_reset_token'), 'users', ['reset_token'], unique=False)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_index(op.f('ix_users_verification_token'), 'users', ['verification_token'], unique=False)
    op.create_table('auth_events',
    sa.Column('user_id', GUID(), nullable=True),
    sa.Column('event_type', sa.String(length=50), nullable=False),
    sa.Column('success', sa.Boolean(), nullable=False),
    sa.Column('failure_reason', sa.String(length=255), nullable=True),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('user_agent', sa.String(length=500), nullable=True),
    sa.Column('device_fingerprint', sa.String(length=255), nullable=True),
    sa.Column('event_metadata', sa.Text(), nullable=True),
    sa.Column('session_id', sa.String(length=255), nullable=True),
    sa.Column('id', GUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_auth_event_ip_time', 'auth_events', ['ip_address', 'created_at'], unique=False)
    op.create_index('idx_auth_event_success_time', 'auth_events', ['success', 'created_at'], unique=False)
    op.create_index('idx_auth_event_type_time', 'auth_events', ['event_type', 'created_at'], unique=False)
    op.create_index('idx_auth_event_user_type', 'auth_events', ['user_id', 'event_type'], unique=False)
    op.create_index(op.f('ix_auth_events_event_type'), 'auth_events', ['event_type'], unique=False)
    op.create_index(op.f('ix_auth_events_id'), 'auth_events', ['id'], unique=False)
    op.create_index(op.f('ix_auth_events_session_id'), 'auth_events', ['session_id'], unique=False)
    op.create_index(op.f('ix_auth_events_user_id'), 'auth_events', ['user_id'], unique=False)
    op.create_table('refresh_tokens',
    sa.Column('token_id', sa.String(length=255), nullable=False),
    sa.Column('user_id', GUID(), nullable=False),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_revoked', sa.Boolean(), nullable=False),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('user_agent', sa.String(length=500), nullable=True),
    sa.Column('device_fingerprint', sa.String(length=255), nullable=True),
    sa.Column('revoked_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('revoke_reason', sa.String(length=100), nullable=True),
    sa.Column('id', GUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_refresh_token_expires', 'refresh_tokens', ['expires_at'], unique=False)
    op.create_index('idx_refresh_token_jti', 'refresh_tokens', ['token_id'], unique=False)
    op.create_index('idx_refresh_token_user_active', 'refresh_tokens', ['user_id', 'is_active'], unique=False)
    op.create_index(op.f('ix_refresh_tokens_id'), 'refresh_tokens', ['id'], unique=False)
    op.create_index(op.f('ix_refresh_tokens_token_id'), 'refresh_tokens', ['token_id'], unique=True)
    op.create_index(op.f('ix_refresh_tokens_user_id'), 'refresh_tokens', ['user_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_refresh_tokens_user_id'), table_name='refresh_tokens')
    op.drop_index(op.f('ix_refresh_tokens_token_id'), table_name='refresh_tokens')
    op.drop_index(op.f('ix_refresh_tokens_id'), table_name='refresh_tokens')
    op.drop_index('idx_refresh_token_user_active', table_name='refresh_tokens')
    op.drop_index('idx_refresh_token_jti', table_name='refresh_tokens')
    op.drop_index('idx_refresh_token_expires', table_name='refresh_tokens')
    op.drop_table('refresh_tokens')
    op.drop_index(op.f('ix_auth_events_user_id'), table_name='auth_events')
    op.drop_index(op.f('ix_auth_events_session_id'), table_name='auth_events')
    op.drop_index(op.f('ix_auth_events_id'), table_name='auth_events')
    op.drop_index(op.f('ix_auth_events_event_type'), table_name='auth_events')
    op.drop_index('idx_auth_event_user_type', table_name='auth_events')
    op.drop_index('idx_auth_event_type_time', table_name='auth_events')
    op.drop_index('idx_auth_event_success_time', table_name='auth_events')
    op.drop_index('idx_auth_event_ip_time', table_name='auth_events')
    op.drop_table('auth_events')
    op.drop_index(op.f('ix_users_verification_token'), table_name='users')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_reset_token'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_index('idx_user_verification_token', table_name='users')
    op.drop_index('idx_user_username_active', table_name='users')
    op.drop_index('idx_user_reset_token', table_name='users')
    op.drop_index('idx_user_email_active', table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###
