[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "grantha"
version = "0.1.0"
description = "AI-powered knowledge management and documentation platform"
readme = "README.md"
requires-python = ">=3.12"
authors = [
    {name = "Grantha Team"},
]
license = {text = "MIT"}
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
dependencies = [
  "fastapi>=0.95.0",
  "uvicorn>=0.21.1",
  "pydantic>=2.0.0",
  "sqlalchemy>=2.0.23",
  "alembic>=1.12.1", 
  "aiosqlite>=0.19.0",
  "asyncpg>=0.29.0",
  "passlib[bcrypt]>=1.7.4",
  "python-jose[cryptography]>=3.3.0",
  "python-multipart>=0.0.6",
  "google-generativeai>=0.3.0",
  "tiktoken>=0.5.0",
  "adalflow>=0.1.0",
  "numpy>=1.24.0",
  "faiss-cpu>=1.7.4",
  "langid>=1.1.6",
  "requests>=2.28.0",
  "jinja2>=3.1.2",
  "python-dotenv>=1.0.0",
  "openai>=1.76.2",
  "ollama>=0.4.8",
  "aiohttp>=3.8.4",
  "boto3>=1.34.0",
  "pytest>=7.0.0",
  "azure-identity>=1.12.0",
  "azure-core>=1.24.0",
  "backoff>=2.2.1",
  "websockets>=12.0",
  "markdown>=3.5.1",
  "pygments>=2.16.1",
  "beautifulsoup4>=4.12.2",
  "lxml>=4.9.3"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-xdist>=3.0.0",
    "pytest-timeout>=2.1.0",
    "httpx>=0.24.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-xdist>=3.0.0",
    "pytest-timeout>=2.1.0",
    "httpx>=0.24.0",
]

[project.scripts]
grantha = "grantha.main:main"

[project.urls]
Homepage = "https://github.com/anubhavg-icpl/grantha"
Repository = "https://github.com/anubhavg-icpl/grantha"
Documentation = "https://github.com/anubhavg-icpl/grantha/docs"
"Bug Tracker" = "https://github.com/anubhavg-icpl/grantha/issues"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
grantha = ["py.typed"]

# Pytest Configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src.grantha",
    "--cov-branch",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-fail-under=80",
]
markers = [
    "unit: Unit tests that don't require external dependencies",
    "integration: Integration tests that test component interactions", 
    "e2e: End-to-end tests that test complete workflows",
    "security: Security-focused tests",
    "performance: Performance and load tests",
    "slow: Tests that take more than a few seconds to run",
    "network: Tests that require network access",
    "requires_api_key: Tests that require real API keys",
    "auth: Authentication and authorization tests",
    "database: Database-related tests",
    "api: API endpoint tests",
    "frontend: Frontend component tests",
]
asyncio_mode = "auto"
timeout = 300
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# Coverage Configuration
[tool.coverage.run]
source = ["src/grantha"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/node_modules/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

# Black Configuration
[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | node_modules
  | venv
)/
'''

# isort Configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["grantha"]
skip_glob = [
    "*/node_modules/*",
    "*/venv/*",
    "*/.venv/*",
]

# MyPy Configuration
[tool.mypy]
python_version = "3.12"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
warn_unused_configs = true
exclude = [
    "venv/",
    "node_modules/",
    "tests/",
]

[[tool.mypy.overrides]]
module = [
    "google.generativeai.*",
    "openai.*",
    "redis.*",
    "alembic.*",
    "sqlalchemy.*",
    "passlib.*",
    "jose.*",
]
ignore_missing_imports = true
