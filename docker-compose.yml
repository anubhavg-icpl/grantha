version: '3.8'

services:
  grantha:
    build: .
    ports:
      - "${API_PORT:-8000}:8000"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PYTHON_ENV=${PYTHON_ENV:-production}
      - API_HOST=0.0.0.0
      - API_PORT=8000
    env_file:
      - .env
    volumes:
      - logs:/app/logs
      - ./configs:/app/configs:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - grantha-network

  # Optional: Add a reverse proxy (similar to deepwiki setup)
  nginx:
    image: nginx:alpine
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - grantha
    restart: unless-stopped
    networks:
      - grantha-network
    profiles:
      - with-nginx

  # Development services
  grantha-dev:
    build: .
    ports:
      - "${API_PORT:-8000}:8000"
    environment:
      - NODE_ENV=development
      - PYTHON_ENV=development
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - API_RELOAD=true
    env_file:
      - .env
    volumes:
      - ./src:/app/src
      - ./configs:/app/configs
      - logs:/app/logs
    command: ["python", "-m", "uvicorn", "src.grantha.api.app:create_app", "--factory", "--host", "0.0.0.0", "--port", "8000", "--reload"]
    restart: unless-stopped
    networks:
      - grantha-network
    profiles:
      - development

volumes:
  logs:
    driver: local

networks:
  grantha-network:
    driver: bridge